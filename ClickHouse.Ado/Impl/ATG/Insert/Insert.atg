$namespace=ClickHouse.Ado.Impl.ATG.Insert
using System.Collections.Generic;
using System.Linq;
COMPILER Insert
public enum ConstType{String,Number,Parameter,Array};
public class ValueType{
	public string StringValue;
	public ValueType[] ArrayValue;
	public ConstType TypeHint;
}
internal IEnumerable<string> fieldList;
internal IEnumerable<ValueType> valueList;
internal string oneParam,tableName;
IGNORECASE
CHARACTERS
letter='A'..'Z'+'a'..'z'+'_'.
digit='0'..'9'.
nonEscaped=ANY-"'"-"\\"-'"'-'`'.
TOKENS
ident=[letter{letter|digit}"."]letter{letter|digit}.
identBackquoted="`" {nonEscaped|"\\\\"|"\\'"|"\\`"} "`".
identQuoted='"' {nonEscaped|"\\\\"|"\\'"} '"'.
stringValue="'" {nonEscaped|"\\\\"|"\\'"|"\\\""|"\\`"} "'".
numValue=["-"|"+"]((digit{digit}["."{digit}])|("."digit{digit})).
insert="INSERT".
values="VALUES".
into="INTO".
settings="SETTINGS".
IGNORE
'\r'+'\n'+'\t'
PRODUCTIONS
Identifier<. out string name .> (. name=null; .)
=
	ident	(. name=t.val; .)
	| identBackquoted	(. name=t.val; .)
	| identQuoted	(. name=t.val; .)
.

Field<. out string name .> (. name=null; string prefix="", suffix=""; .)
=
	Identifier<out prefix> ["." Identifier<out suffix> (. suffix="."+suffix; .)]	(. name=prefix+suffix; .)
.

FieldList<. out IEnumerable<string> elements .>	(. var rv=new List<string>(); elements=rv; string elem; IEnumerable<string> inner; .)
=
	Field<out elem>	(. rv.Add(elem); .)
	[
	","
	FieldList<out inner>	(. rv.AddRange(inner); .)
	]
.

Parameter< out string name >
=
	("@"|":")
	ident	(. name=t.val; .)
.

Value<. out ValueType val .>	(. val = null; string paramName=null; IEnumerable<ValueType > inner; .)
=
	stringValue	(. val=new ValueType{StringValue=t.val,TypeHint=ConstType.String}; .)
	| Parameter<out paramName>	(. val=new ValueType{StringValue=paramName,TypeHint=ConstType.Parameter}; .)
	| numValue	(. val=new ValueType{StringValue=t.val,TypeHint=ConstType.Number}; .)
	|  "["
	   ValueList<out inner> (. val=new ValueType{ArrayValue=inner.ToArray(), TypeHint=ConstType.Array}; .)
	   "]"
.

ValueList<. out IEnumerable<ValueType > elements .>	(. var rv=new List<ValueType >(); elements=rv; ValueType elem; IEnumerable<ValueType > inner; .)
=
	Value<out elem>	(. rv.Add(elem); .)
	[
	","
	ValueList<out inner>	(. rv.AddRange(inner); .)
	]
.

Insert	(.  .)
=
	insert
	into
	Field<out tableName>
	[
	"("
	FieldList<out fieldList>
	")"
	]
	[ 
	settings
	(. ValueType ignore; .)
	ident
	"="
	Value<out ignore>
	{
	    ","
		ident
     	"="
     	Value<out ignore>

	}
	]
	values
	(
		Parameter<out oneParam>
		|	"("
			ValueList<out valueList>
			")"
	)
	{ ";" }
.
END Insert.
